
================================================================================ 
$ colcon build --help
usage: colcon build [-h] [--build-base BUILD_BASE]
                    [--install-base INSTALL_BASE] [--merge-install]
                    [--symlink-install] [--test-result-base TEST_RESULT_BASE]
                    [--continue-on-error] [--executor {parallel,sequential}]
                    [--parallel-workers NUMBER]
                    [--event-handlers [name1+ [name2- ...]]]
                    [--ignore-user-meta] [--metas [PATH [PATH ...]]]
                    [--base-paths [PATH [PATH ...]]]
                    [--packages-ignore [PKG_NAME [PKG_NAME ...]]]
                    [--packages-ignore-regex [PATTERN [PATTERN ...]]]
                    [--paths [PATH [PATH ...]]]
                    [--packages-up-to [PKG_NAME [PKG_NAME ...]]]
                    [--packages-up-to-regex [PATTERN [PATTERN ...]]]
                    [--packages-above [PKG_NAME [PKG_NAME ...]]]
                    [--packages-above-and-dependencies [PKG_NAME [PKG_NAME ...]]]
                    [--packages-above-depth DEPTH [PKG_NAME ...]]
                    [--packages-select-by-dep [PKG_NAME [PKG_NAME ...]]]
                    [--packages-skip-by-dep [PKG_NAME [PKG_NAME ...]]]
                    [--packages-skip-up-to [PKG_NAME [PKG_NAME ...]]]
                    [--packages-select-build-failed | --packages-skip-build-finished | --packages-select-test-failures | --packages-skip-test-passed]
                    [--packages-select [PKG_NAME [PKG_NAME ...]]]
                    [--packages-skip [PKG_NAME [PKG_NAME ...]]]
                    [--packages-select-regex [PATTERN [PATTERN ...]]]
                    [--packages-skip-regex [PATTERN [PATTERN ...]]]
                    [--packages-start PKG_NAME] [--packages-end PKG_NAME]
                    [--allow-overriding PKG_NAME [PKG_NAME ...]]
                    [--cmake-args [* [* ...]]] [--cmake-target CMAKE_TARGET]
                    [--cmake-target-skip-unavailable] [--cmake-clean-cache]
                    [--cmake-clean-first] [--cmake-force-configure]
                    [--ament-cmake-args [* [* ...]]]
                    [--catkin-cmake-args [* [* ...]]]
                    [--catkin-skip-building-tests]

Build a set of packages.

optional arguments:
  -h, --help            show this help message and exit
  --build-base BUILD_BASE
                        The base path for all build directories (default:
                        build)
  --install-base INSTALL_BASE
                        The base path for all install prefixes (default:
                        install)
  --merge-install       Merge all install prefixes into a single location
  --symlink-install     Use symlinks instead of copying files where possible
  --test-result-base TEST_RESULT_BASE
                        The base path for all test results (default: --build-
                        base)
  --continue-on-error   Continue other packages when a package fails to build
                        (packages recursively depending on the failed package
                        are skipped)

Executor arguments:
  --executor {parallel,sequential}
                        The executor to process all packages (default:
                        parallel)
                        * parallel: Process multiple packages in parallel
                        * sequential: Process one package at a time
  --parallel-workers NUMBER
                        The maximum number of packages to process in parallel
                        (default: 2)

Event handler arguments:
  --event-handlers [name1+ [name2- ...]]
                        Enable (+) or disable (-) event handlers (default:
                        compile_commands+ console_cohesion- console_direct-
                        console_package_list- console_start_end+
                        console_stderr+ desktop_notification+ event_log+ log+
                        log_command+ status- store_result+ summary+
                        terminal_title-)
                        * compile_commands: Generate a `compile_commands.json`
                        file for the whole workspace
                        * console_cohesion: Pass task output at once to stdout
                        * console_direct: Pass output directly to stdout/err
                        * console_package_list: Output list of queued job
                        names
                        * console_start_end: Output task name on start/end
                        * console_stderr: Output all stderr of a task at once
                        * desktop_notification: Desktop notification of the
                        summary
                        * event_log: Log all events to a global log file
                        * log: Output task specific log files
                        * log_command: Log a 'debug' message for each command
                        * status: Continuously update a status line
                        * store_result: Persist the result of a job in a file
                        in its build directory
                        * summary: Output summary of all tasks
                        * terminal_title: Show status in the terminal title

Discovery arguments:
  --ignore-user-meta    Ignore `*.meta` files in the user config directory
                        `/home/parallels/.colcon/metadata`
  --metas [PATH [PATH ...]]
                        The directories containing a `colcon.meta` file or
                        paths to arbitrary files containing the same meta
                        information (default: ./colcon.meta)
  --base-paths [PATH [PATH ...]]
                        The base paths to recursively crawl for packages
                        (default: .)
  --packages-ignore [PKG_NAME [PKG_NAME ...]]
                        Ignore packages as if they were not discovered
  --packages-ignore-regex [PATTERN [PATTERN ...]]
                        Ignore packages where any of the patterns match the
                        package name
  --paths [PATH [PATH ...]]
                        The paths to check for a package. Use shell wildcards
                        (e.g. `src/*`) to select all direct subdirectories

Package selection arguments:
  --packages-up-to [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and their recursive
                        dependencies
  --packages-up-to-regex [PATTERN [PATTERN ...]]
                        Only process a subset of packages and their recursive
                        dependencies, where any of the patterns match the
                        package name
  --packages-above [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and packages which
                        recursively depend on them
  --packages-above-and-dependencies [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and packages which
                        recursively depend on them including all their
                        recursive dependencies
  --packages-above-depth DEPTH [PKG_NAME ...]
                        Only process a subset of packages and packages which
                        recursively depend on them up to a given depth
  --packages-select-by-dep [PKG_NAME [PKG_NAME ...]]
                        Only process packages which (recursively) depend on
                        this
  --packages-skip-by-dep [PKG_NAME [PKG_NAME ...]]
                        Skip packages which (recursively) depend on this
  --packages-skip-up-to [PKG_NAME [PKG_NAME ...]]
                        Skip a subset of packages and their recursive
                        dependencies
  --packages-select-build-failed
                        Only process a subset of packages which have failed to
                        build previously (aborted packages are not considered
                        errors)
  --packages-skip-build-finished
                        Skip a set of packages which have finished to build
                        previously
  --packages-select-test-failures
                        Only process a subset of packages which had test
                        failures previously
  --packages-skip-test-passed
                        Skip a set of packages which had no test failures
                        previously
  --packages-select [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages
  --packages-skip [PKG_NAME [PKG_NAME ...]]
                        Skip a set of packages
  --packages-select-regex [PATTERN [PATTERN ...]]
                        Only process a subset of packages where any of the
                        patterns match the package name
  --packages-skip-regex [PATTERN [PATTERN ...]]
                        Skip a set of packages where any of the patterns match
                        the package name
  --packages-start PKG_NAME
                        Skip packages before this in flat topological ordering
  --packages-end PKG_NAME
                        Skip packages after this in flat topological ordering
  --allow-overriding PKG_NAME [PKG_NAME ...]
                        Allow building packages that exist in underlay
                        workspaces

Arguments for 'cmake' packages:
  --cmake-args [* [* ...]]
                        Pass arguments to CMake projects. Arguments matching
                        other options must be prefixed by a space,
                        e.g. --cmake-args " --help" (stdout might not be shown
                        by default, e.g. add `--event-handlers
                        console_cohesion+`)
  --cmake-target CMAKE_TARGET
                        Build a specific target instead of the default target
  --cmake-target-skip-unavailable
                        Skip building packages which don't have the target
                        passed to --cmake-target
  --cmake-clean-cache   Remove CMake cache before the build (implicitly
                        forcing CMake configure step)
  --cmake-clean-first   Build target 'clean' first, then build (to only clean
                        use '--cmake-target clean')
  --cmake-force-configure
                        Force CMake configure step

Arguments for 'ros.ament_cmake' packages:
  --ament-cmake-args [* [* ...]]
                        Pass arguments to 'ament_cmake' packages. Arguments
                        matching other options must be prefixed by a space

Arguments for 'ros.catkin' packages:
  --catkin-cmake-args [* [* ...]]
                        Pass arguments to 'catkin' packages. Arguments
                        matching other options must be prefixed by a space
  --catkin-skip-building-tests
                        By default the 'tests' target of 'catkin' packages is
                        invoked. If running 'colcon test' later isn't intended
                        this can be skipped

================================================================================ 
$ colcon extension-points --help
usage: colcon extension-points [-h] [--all] [--verbose]

List extension points.

optional arguments:
  -h, --help     show this help message and exit
  --all, -a      Also show extension points which failed to be imported.
                 (prefixed with `- `)
  --verbose, -v  Show more information for each extension point

================================================================================ 
$ colcon extensions --help
usage: colcon extensions [-h] [--all] [--verbose] [GROUP_NAME]

List extensions.

positional arguments:
  GROUP_NAME     Only show the extensions in a specific group

optional arguments:
  -h, --help     show this help message and exit
  --all, -a      Also show extensions which failed to load or are
                 incompatible. (prefixed with `- `)
  --verbose, -v  Show more information for each extension

================================================================================ 
$ colcon graph --help
usage: colcon graph [-h] [--build-base BUILD_BASE] [--ignore-user-meta]
                    [--metas [PATH [PATH ...]]]
                    [--base-paths [PATH [PATH ...]]]
                    [--packages-ignore [PKG_NAME [PKG_NAME ...]]]
                    [--packages-ignore-regex [PATTERN [PATTERN ...]]]
                    [--paths [PATH [PATH ...]]]
                    [--packages-up-to [PKG_NAME [PKG_NAME ...]]]
                    [--packages-up-to-regex [PATTERN [PATTERN ...]]]
                    [--packages-above [PKG_NAME [PKG_NAME ...]]]
                    [--packages-above-and-dependencies [PKG_NAME [PKG_NAME ...]]]
                    [--packages-above-depth DEPTH [PKG_NAME ...]]
                    [--packages-select-by-dep [PKG_NAME [PKG_NAME ...]]]
                    [--packages-skip-by-dep [PKG_NAME [PKG_NAME ...]]]
                    [--packages-skip-up-to [PKG_NAME [PKG_NAME ...]]]
                    [--packages-select-build-failed | --packages-skip-build-finished | --packages-select-test-failures | --packages-skip-test-passed]
                    [--packages-select [PKG_NAME [PKG_NAME ...]]]
                    [--packages-skip [PKG_NAME [PKG_NAME ...]]]
                    [--packages-select-regex [PATTERN [PATTERN ...]]]
                    [--packages-skip-regex [PATTERN [PATTERN ...]]]
                    [--packages-start PKG_NAME] [--packages-end PKG_NAME]
                    [--allow-overriding PKG_NAME [PKG_NAME ...]]
                    [--dot | --density] [--legend] [--dot-cluster]
                    [--dot-include-skipped]

Generate a visual representation of the dependency graph.

optional arguments:
  -h, --help            show this help message and exit
  --build-base BUILD_BASE
                        The base path for all build directories (default:
                        build)
  --dot                 Output topological graph in DOT (e.g. pass the output
                        to dot: ` | dot -Tpng -o graph.png`), legend:
                        blue=build, red=run, tan=test, dashed=indirect
  --density             Output density of the graph (only without --dot)
  --legend              Output legend for the graph
  --dot-cluster         Cluster packages by their filesystem path (only
                        affects --dot)
  --dot-include-skipped
                        Also output skipped packages (only affects --dot)

Discovery arguments:
  --ignore-user-meta    Ignore `*.meta` files in the user config directory
                        `/home/parallels/.colcon/metadata`
  --metas [PATH [PATH ...]]
                        The directories containing a `colcon.meta` file or
                        paths to arbitrary files containing the same meta
                        information (default: ./colcon.meta)
  --base-paths [PATH [PATH ...]]
                        The base paths to recursively crawl for packages
                        (default: .)
  --packages-ignore [PKG_NAME [PKG_NAME ...]]
                        Ignore packages as if they were not discovered
  --packages-ignore-regex [PATTERN [PATTERN ...]]
                        Ignore packages where any of the patterns match the
                        package name
  --paths [PATH [PATH ...]]
                        The paths to check for a package. Use shell wildcards
                        (e.g. `src/*`) to select all direct subdirectories

Package selection arguments:
  --packages-up-to [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and their recursive
                        dependencies
  --packages-up-to-regex [PATTERN [PATTERN ...]]
                        Only process a subset of packages and their recursive
                        dependencies, where any of the patterns match the
                        package name
  --packages-above [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and packages which
                        recursively depend on them
  --packages-above-and-dependencies [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and packages which
                        recursively depend on them including all their
                        recursive dependencies
  --packages-above-depth DEPTH [PKG_NAME ...]
                        Only process a subset of packages and packages which
                        recursively depend on them up to a given depth
  --packages-select-by-dep [PKG_NAME [PKG_NAME ...]]
                        Only process packages which (recursively) depend on
                        this
  --packages-skip-by-dep [PKG_NAME [PKG_NAME ...]]
                        Skip packages which (recursively) depend on this
  --packages-skip-up-to [PKG_NAME [PKG_NAME ...]]
                        Skip a subset of packages and their recursive
                        dependencies
  --packages-select-build-failed
                        Only process a subset of packages which have failed to
                        build previously (aborted packages are not considered
                        errors)
  --packages-skip-build-finished
                        Skip a set of packages which have finished to build
                        previously
  --packages-select-test-failures
                        Only process a subset of packages which had test
                        failures previously
  --packages-skip-test-passed
                        Skip a set of packages which had no test failures
                        previously
  --packages-select [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages
  --packages-skip [PKG_NAME [PKG_NAME ...]]
                        Skip a set of packages
  --packages-select-regex [PATTERN [PATTERN ...]]
                        Only process a subset of packages where any of the
                        patterns match the package name
  --packages-skip-regex [PATTERN [PATTERN ...]]
                        Skip a set of packages where any of the patterns match
                        the package name
  --packages-start PKG_NAME
                        Skip packages before this in flat topological ordering
  --packages-end PKG_NAME
                        Skip packages after this in flat topological ordering
  --allow-overriding PKG_NAME [PKG_NAME ...]
                        Allow building packages that exist in underlay
                        workspaces

================================================================================ 
$ colcon info --help
usage: colcon info [-h] [--build-base BUILD_BASE] [--ignore-user-meta]
                   [--metas [PATH [PATH ...]]]
                   [--base-paths [PATH [PATH ...]]]
                   [--packages-ignore [PKG_NAME [PKG_NAME ...]]]
                   [--packages-ignore-regex [PATTERN [PATTERN ...]]]
                   [--paths [PATH [PATH ...]]]
                   [--packages-up-to [PKG_NAME [PKG_NAME ...]]]
                   [--packages-up-to-regex [PATTERN [PATTERN ...]]]
                   [--packages-above [PKG_NAME [PKG_NAME ...]]]
                   [--packages-above-and-dependencies [PKG_NAME [PKG_NAME ...]]]
                   [--packages-above-depth DEPTH [PKG_NAME ...]]
                   [--packages-select-by-dep [PKG_NAME [PKG_NAME ...]]]
                   [--packages-skip-by-dep [PKG_NAME [PKG_NAME ...]]]
                   [--packages-skip-up-to [PKG_NAME [PKG_NAME ...]]]
                   [--packages-select-build-failed | --packages-skip-build-finished | --packages-select-test-failures | --packages-skip-test-passed]
                   [--packages-select [PKG_NAME [PKG_NAME ...]]]
                   [--packages-skip [PKG_NAME [PKG_NAME ...]]]
                   [--packages-select-regex [PATTERN [PATTERN ...]]]
                   [--packages-skip-regex [PATTERN [PATTERN ...]]]
                   [--packages-start PKG_NAME] [--packages-end PKG_NAME]
                   [--allow-overriding PKG_NAME [PKG_NAME ...]]
                   [PKG_NAME [PKG_NAME ...]]

Package information.

positional arguments:
  PKG_NAME              Only show the information of a subset of packages

optional arguments:
  -h, --help            show this help message and exit
  --build-base BUILD_BASE
                        The base path for all build directories (default:
                        build)

Discovery arguments:
  --ignore-user-meta    Ignore `*.meta` files in the user config directory
                        `/home/parallels/.colcon/metadata`
  --metas [PATH [PATH ...]]
                        The directories containing a `colcon.meta` file or
                        paths to arbitrary files containing the same meta
                        information (default: ./colcon.meta)
  --base-paths [PATH [PATH ...]]
                        The base paths to recursively crawl for packages
                        (default: .)
  --packages-ignore [PKG_NAME [PKG_NAME ...]]
                        Ignore packages as if they were not discovered
  --packages-ignore-regex [PATTERN [PATTERN ...]]
                        Ignore packages where any of the patterns match the
                        package name
  --paths [PATH [PATH ...]]
                        The paths to check for a package. Use shell wildcards
                        (e.g. `src/*`) to select all direct subdirectories

Package selection arguments:
  --packages-up-to [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and their recursive
                        dependencies
  --packages-up-to-regex [PATTERN [PATTERN ...]]
                        Only process a subset of packages and their recursive
                        dependencies, where any of the patterns match the
                        package name
  --packages-above [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and packages which
                        recursively depend on them
  --packages-above-and-dependencies [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and packages which
                        recursively depend on them including all their
                        recursive dependencies
  --packages-above-depth DEPTH [PKG_NAME ...]
                        Only process a subset of packages and packages which
                        recursively depend on them up to a given depth
  --packages-select-by-dep [PKG_NAME [PKG_NAME ...]]
                        Only process packages which (recursively) depend on
                        this
  --packages-skip-by-dep [PKG_NAME [PKG_NAME ...]]
                        Skip packages which (recursively) depend on this
  --packages-skip-up-to [PKG_NAME [PKG_NAME ...]]
                        Skip a subset of packages and their recursive
                        dependencies
  --packages-select-build-failed
                        Only process a subset of packages which have failed to
                        build previously (aborted packages are not considered
                        errors)
  --packages-skip-build-finished
                        Skip a set of packages which have finished to build
                        previously
  --packages-select-test-failures
                        Only process a subset of packages which had test
                        failures previously
  --packages-skip-test-passed
                        Skip a set of packages which had no test failures
                        previously
  --packages-select [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages
  --packages-skip [PKG_NAME [PKG_NAME ...]]
                        Skip a set of packages
  --packages-select-regex [PATTERN [PATTERN ...]]
                        Only process a subset of packages where any of the
                        patterns match the package name
  --packages-skip-regex [PATTERN [PATTERN ...]]
                        Skip a set of packages where any of the patterns match
                        the package name
  --packages-start PKG_NAME
                        Skip packages before this in flat topological ordering
  --packages-end PKG_NAME
                        Skip packages after this in flat topological ordering
  --allow-overriding PKG_NAME [PKG_NAME ...]
                        Allow building packages that exist in underlay
                        workspaces

================================================================================ 
$ colcon list --help
usage: colcon list [-h] [--build-base BUILD_BASE] [--ignore-user-meta]
                   [--metas [PATH [PATH ...]]]
                   [--base-paths [PATH [PATH ...]]]
                   [--packages-ignore [PKG_NAME [PKG_NAME ...]]]
                   [--packages-ignore-regex [PATTERN [PATTERN ...]]]
                   [--paths [PATH [PATH ...]]]
                   [--packages-up-to [PKG_NAME [PKG_NAME ...]]]
                   [--packages-up-to-regex [PATTERN [PATTERN ...]]]
                   [--packages-above [PKG_NAME [PKG_NAME ...]]]
                   [--packages-above-and-dependencies [PKG_NAME [PKG_NAME ...]]]
                   [--packages-above-depth DEPTH [PKG_NAME ...]]
                   [--packages-select-by-dep [PKG_NAME [PKG_NAME ...]]]
                   [--packages-skip-by-dep [PKG_NAME [PKG_NAME ...]]]
                   [--packages-skip-up-to [PKG_NAME [PKG_NAME ...]]]
                   [--packages-select-build-failed | --packages-skip-build-finished | --packages-select-test-failures | --packages-skip-test-passed]
                   [--packages-select [PKG_NAME [PKG_NAME ...]]]
                   [--packages-skip [PKG_NAME [PKG_NAME ...]]]
                   [--packages-select-regex [PATTERN [PATTERN ...]]]
                   [--packages-skip-regex [PATTERN [PATTERN ...]]]
                   [--packages-start PKG_NAME] [--packages-end PKG_NAME]
                   [--allow-overriding PKG_NAME [PKG_NAME ...]]
                   [--topological-order] [--names-only | --paths-only]
                   [--topological-graph] [--topological-graph-dot]
                   [--topological-graph-density] [--topological-graph-legend]
                   [--topological-graph-dot-cluster]
                   [--topological-graph-dot-include-skipped]

List packages, optionally in topological ordering.

optional arguments:
  -h, --help            show this help message and exit
  --build-base BUILD_BASE
                        The base path for all build directories (default:
                        build)
  --topological-order, -t
                        Order output based on topological ordering (breadth-
                        first)
  --names-only, -n      Output only the name of each package but not the path
  --paths-only, -p      Output only the path of each package but not the name

Discovery arguments:
  --ignore-user-meta    Ignore `*.meta` files in the user config directory
                        `/home/parallels/.colcon/metadata`
  --metas [PATH [PATH ...]]
                        The directories containing a `colcon.meta` file or
                        paths to arbitrary files containing the same meta
                        information (default: ./colcon.meta)
  --base-paths [PATH [PATH ...]]
                        The base paths to recursively crawl for packages
                        (default: .)
  --packages-ignore [PKG_NAME [PKG_NAME ...]]
                        Ignore packages as if they were not discovered
  --packages-ignore-regex [PATTERN [PATTERN ...]]
                        Ignore packages where any of the patterns match the
                        package name
  --paths [PATH [PATH ...]]
                        The paths to check for a package. Use shell wildcards
                        (e.g. `src/*`) to select all direct subdirectories

Package selection arguments:
  --packages-up-to [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and their recursive
                        dependencies
  --packages-up-to-regex [PATTERN [PATTERN ...]]
                        Only process a subset of packages and their recursive
                        dependencies, where any of the patterns match the
                        package name
  --packages-above [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and packages which
                        recursively depend on them
  --packages-above-and-dependencies [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and packages which
                        recursively depend on them including all their
                        recursive dependencies
  --packages-above-depth DEPTH [PKG_NAME ...]
                        Only process a subset of packages and packages which
                        recursively depend on them up to a given depth
  --packages-select-by-dep [PKG_NAME [PKG_NAME ...]]
                        Only process packages which (recursively) depend on
                        this
  --packages-skip-by-dep [PKG_NAME [PKG_NAME ...]]
                        Skip packages which (recursively) depend on this
  --packages-skip-up-to [PKG_NAME [PKG_NAME ...]]
                        Skip a subset of packages and their recursive
                        dependencies
  --packages-select-build-failed
                        Only process a subset of packages which have failed to
                        build previously (aborted packages are not considered
                        errors)
  --packages-skip-build-finished
                        Skip a set of packages which have finished to build
                        previously
  --packages-select-test-failures
                        Only process a subset of packages which had test
                        failures previously
  --packages-skip-test-passed
                        Skip a set of packages which had no test failures
                        previously
  --packages-select [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages
  --packages-skip [PKG_NAME [PKG_NAME ...]]
                        Skip a set of packages
  --packages-select-regex [PATTERN [PATTERN ...]]
                        Only process a subset of packages where any of the
                        patterns match the package name
  --packages-skip-regex [PATTERN [PATTERN ...]]
                        Skip a set of packages where any of the patterns match
                        the package name
  --packages-start PKG_NAME
                        Skip packages before this in flat topological ordering
  --packages-end PKG_NAME
                        Skip packages after this in flat topological ordering
  --allow-overriding PKG_NAME [PKG_NAME ...]
                        Allow building packages that exist in underlay
                        workspaces

Obsolete arguments:
  --topological-graph, -g
                        Instead use `colcon graph`
  --topological-graph-dot
                        Instead use `colcon graph --dot`
  --topological-graph-density
                        Instead use `colcon graph --density`
  --topological-graph-legend
                        Instead use `colcon graph --legend`
  --topological-graph-dot-cluster
                        Instead use `colcon graph --dot --dot-cluster`
  --topological-graph-dot-include-skipped
                        Instead use `colcon graph --dot --dot-include-skipped`

================================================================================ 
$ colcon metadata --help
usage: colcon metadata [-h] {add,list,remove,update} ...

Manage metadata of packages.

optional arguments:
  -h, --help            show this help message and exit

colcon metadata verbs:
  add                   Add the URL of a repository index
  list                  List all repositories and their metadata
  remove                Remove a repository from the list of indexes
  update                Update the metadata from the repository indexes

  {add,list,remove,update}
                        call `colcon metadata VERB -h` for specific help

================================================================================ 
$ colcon test --help
usage: colcon test [-h] [--build-base BUILD_BASE]
                   [--install-base INSTALL_BASE] [--merge-install]
                   [--test-result-base TEST_RESULT_BASE]
                   [--retest-until-fail N | --retest-until-pass N]
                   [--abort-on-error] [--return-code-on-test-failure]
                   [--executor {parallel,sequential}]
                   [--parallel-workers NUMBER]
                   [--event-handlers [name1+ [name2- ...]]]
                   [--ignore-user-meta] [--metas [PATH [PATH ...]]]
                   [--base-paths [PATH [PATH ...]]]
                   [--packages-ignore [PKG_NAME [PKG_NAME ...]]]
                   [--packages-ignore-regex [PATTERN [PATTERN ...]]]
                   [--paths [PATH [PATH ...]]]
                   [--packages-up-to [PKG_NAME [PKG_NAME ...]]]
                   [--packages-up-to-regex [PATTERN [PATTERN ...]]]
                   [--packages-above [PKG_NAME [PKG_NAME ...]]]
                   [--packages-above-and-dependencies [PKG_NAME [PKG_NAME ...]]]
                   [--packages-above-depth DEPTH [PKG_NAME ...]]
                   [--packages-select-by-dep [PKG_NAME [PKG_NAME ...]]]
                   [--packages-skip-by-dep [PKG_NAME [PKG_NAME ...]]]
                   [--packages-skip-up-to [PKG_NAME [PKG_NAME ...]]]
                   [--packages-select-build-failed | --packages-skip-build-finished | --packages-select-test-failures | --packages-skip-test-passed]
                   [--packages-select [PKG_NAME [PKG_NAME ...]]]
                   [--packages-skip [PKG_NAME [PKG_NAME ...]]]
                   [--packages-select-regex [PATTERN [PATTERN ...]]]
                   [--packages-skip-regex [PATTERN [PATTERN ...]]]
                   [--packages-start PKG_NAME] [--packages-end PKG_NAME]
                   [--allow-overriding PKG_NAME [PKG_NAME ...]]
                   [--ctest-args [* [* ...]]]
                   [--python-testing {pytest,setuppy_test}]
                   [--pytest-args [* [* ...]]] [--pytest-with-coverage]
                   [--unittest-args [* [* ...]]]

Test a set of packages.

optional arguments:
  -h, --help            show this help message and exit
  --build-base BUILD_BASE
                        The base path for all build directories (default:
                        build)
  --install-base INSTALL_BASE
                        The base path for all install prefixes (default:
                        install)
  --merge-install       Merge all install prefixes into a single location
  --test-result-base TEST_RESULT_BASE
                        The base path for all test results (default: --build-
                        base)
  --retest-until-fail N
                        Rerun tests up to N times if they pass
  --retest-until-pass N
                        Rerun failing tests up to N times
  --abort-on-error      Abort after the first package with any errors (failing
                        tests are not considered errors in this context)
  --return-code-on-test-failure
                        Use a non-zero return code to indicate any test
                        failure

Executor arguments:
  --executor {parallel,sequential}
                        The executor to process all packages (default:
                        parallel)
                        * parallel: Process multiple packages in parallel
                        * sequential: Process one package at a time
  --parallel-workers NUMBER
                        The maximum number of packages to process in parallel
                        (default: 2)

Event handler arguments:
  --event-handlers [name1+ [name2- ...]]
                        Enable (+) or disable (-) event handlers (default:
                        compile_commands+ console_cohesion- console_direct-
                        console_package_list- console_start_end+
                        console_stderr+ desktop_notification+ event_log+ log+
                        log_command+ status- store_result+ summary+
                        terminal_title-)
                        * compile_commands: Generate a `compile_commands.json`
                        file for the whole workspace
                        * console_cohesion: Pass task output at once to stdout
                        * console_direct: Pass output directly to stdout/err
                        * console_package_list: Output list of queued job
                        names
                        * console_start_end: Output task name on start/end
                        * console_stderr: Output all stderr of a task at once
                        * desktop_notification: Desktop notification of the
                        summary
                        * event_log: Log all events to a global log file
                        * log: Output task specific log files
                        * log_command: Log a 'debug' message for each command
                        * status: Continuously update a status line
                        * store_result: Persist the result of a job in a file
                        in its build directory
                        * summary: Output summary of all tasks
                        * terminal_title: Show status in the terminal title

Discovery arguments:
  --ignore-user-meta    Ignore `*.meta` files in the user config directory
                        `/home/parallels/.colcon/metadata`
  --metas [PATH [PATH ...]]
                        The directories containing a `colcon.meta` file or
                        paths to arbitrary files containing the same meta
                        information (default: ./colcon.meta)
  --base-paths [PATH [PATH ...]]
                        The base paths to recursively crawl for packages
                        (default: .)
  --packages-ignore [PKG_NAME [PKG_NAME ...]]
                        Ignore packages as if they were not discovered
  --packages-ignore-regex [PATTERN [PATTERN ...]]
                        Ignore packages where any of the patterns match the
                        package name
  --paths [PATH [PATH ...]]
                        The paths to check for a package. Use shell wildcards
                        (e.g. `src/*`) to select all direct subdirectories

Package selection arguments:
  --packages-up-to [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and their recursive
                        dependencies
  --packages-up-to-regex [PATTERN [PATTERN ...]]
                        Only process a subset of packages and their recursive
                        dependencies, where any of the patterns match the
                        package name
  --packages-above [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and packages which
                        recursively depend on them
  --packages-above-and-dependencies [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages and packages which
                        recursively depend on them including all their
                        recursive dependencies
  --packages-above-depth DEPTH [PKG_NAME ...]
                        Only process a subset of packages and packages which
                        recursively depend on them up to a given depth
  --packages-select-by-dep [PKG_NAME [PKG_NAME ...]]
                        Only process packages which (recursively) depend on
                        this
  --packages-skip-by-dep [PKG_NAME [PKG_NAME ...]]
                        Skip packages which (recursively) depend on this
  --packages-skip-up-to [PKG_NAME [PKG_NAME ...]]
                        Skip a subset of packages and their recursive
                        dependencies
  --packages-select-build-failed
                        Only process a subset of packages which have failed to
                        build previously (aborted packages are not considered
                        errors)
  --packages-skip-build-finished
                        Skip a set of packages which have finished to build
                        previously
  --packages-select-test-failures
                        Only process a subset of packages which had test
                        failures previously
  --packages-skip-test-passed
                        Skip a set of packages which had no test failures
                        previously
  --packages-select [PKG_NAME [PKG_NAME ...]]
                        Only process a subset of packages
  --packages-skip [PKG_NAME [PKG_NAME ...]]
                        Skip a set of packages
  --packages-select-regex [PATTERN [PATTERN ...]]
                        Only process a subset of packages where any of the
                        patterns match the package name
  --packages-skip-regex [PATTERN [PATTERN ...]]
                        Skip a set of packages where any of the patterns match
                        the package name
  --packages-start PKG_NAME
                        Skip packages before this in flat topological ordering
  --packages-end PKG_NAME
                        Skip packages after this in flat topological ordering
  --allow-overriding PKG_NAME [PKG_NAME ...]
                        Allow building packages that exist in underlay
                        workspaces

Arguments for 'cmake' packages:
  --ctest-args [* [* ...]]
                        Pass arguments to CTest projects. Arguments matching
                        other options must be prefixed by a space,
                        e.g. --ctest-args " --help" (stdout might not be shown
                        by default, e.g. add `--event-handlers
                        console_cohesion+`)

Arguments for 'python' packages:
  --python-testing {pytest,setuppy_test}
                        The Python testing framework to use (default:
                        determined based on the packages `tests_require`)
                        * pytest: Use `pytest` to test Python packages
                        * setuppy_test: Use `unittest` to test packages
  --pytest-args [* [* ...]]
                        Pass arguments to pytests. Arguments matching other
                        options must be prefixed by a space,
                        e.g. --pytest-args " --help" (stdout might not be
                        shown by default, e.g. add `--event-handlers
                        console_cohesion+`)
  --pytest-with-coverage
                        Generate coverage information
  --unittest-args [* [* ...]]
                        Pass arguments to Python unittests. Arguments matching
                        other options must be prefixed by a space,
                        e.g. --unittest-args " --help" (stdout might not be
                        shown by default, e.g. add `--event-handlers
                        console_cohesion+`)

================================================================================ 
$ colcon test-result --help
usage: colcon test-result [-h] [--test-result-base TEST_RESULT_BASE] [--all]
                          [--result-files-only] [--verbose] [--delete]
                          [--delete-yes]

Show the test results generated when testing a set of packages.

optional arguments:
  -h, --help            show this help message and exit
  --test-result-base TEST_RESULT_BASE
                        The base path for all test results (default: build)
  --all                 Show all test result files (even without errors /
                        failures)
  --result-files-only   Print only the paths of the result files. Use with
                        --all to include files without errors / failures
  --verbose             Show additional information for errors / failures
  --delete              Delete all result files. This might include additional
                        files beside what is listed by --result-files-only. An
                        interactive prompt will ask for confirmation
  --delete-yes          Same as --delete without an interactive confirmation

================================================================================ 
$ colcon packages --help


================================================================================ 
$ colcon version-check --help
usage: colcon version-check [-h]

Compare local package versions with PyPI.

optional arguments:
  -h, --help  show this help message and exit

================================================================================ 
$ colcon --help
usage: colcon [-h] [--log-base LOG_BASE] [--log-level LOG_LEVEL]
              {build,extension-points,extensions,graph,info,list,metadata,test,test-result,version-check}
              ...

optional arguments:
  -h, --help            show this help message and exit
  --log-base LOG_BASE   The base path for all log directories (default: ./log,
                        to disable: /dev/null)
  --log-level LOG_LEVEL
                        Set log level for the console output, either by
                        numeric or string value (default: warning)

colcon verbs:
  build                 Build a set of packages
  extension-points      List extension points
  extensions            List extensions
  graph                 Generate a visual representation of the dependency graph
  info                  Package information
  list                  List packages, optionally in topological ordering
  metadata              Manage metadata of packages
  test                  Test a set of packages
  test-result           Show the test results generated when testing a set of
                        packages
  version-check         Compare local package versions with PyPI

  {build,extension-points,extensions,graph,info,list,metadata,test,test-result,version-check}
                        call `colcon VERB -h` for specific help

Environment variables:
  CMAKE_COMMAND         The full path to the CMake executable
  COLCON_ALL_SHELLS     Flag to enable all shell extensions
  COLCON_COMPLETION_LOGFILE
                        Set the logfile for completion time
  COLCON_DEFAULTS_FILE  Set path to the yaml file containing the default values
                        for the command line arguments (default:
                        $COLCON_HOME/defaults.yaml)
  COLCON_DEFAULT_EXECUTOR
                        Select the default executor extension
  COLCON_EXTENSION_BLOCKLIST
                        Block extensions which should not be used
  COLCON_HOME           Set the configuration directory (default: ~/.colcon)
  COLCON_LOG_LEVEL      Set the log level (debug|10, info|20, warn|30,
                        error|40, critical|50, or any other positive numeric
                        value)
  COLCON_WARNINGS       Set the warnings filter similar to PYTHONWARNINGS
                        except that the module entry is implicitly set to
                        'colcon.*'
  CTEST_COMMAND         The full path to the CTest executable
  POWERSHELL_COMMAND    The full path to the PowerShell executable

For more help and usage tips, see https://colcon.readthedocs.io
